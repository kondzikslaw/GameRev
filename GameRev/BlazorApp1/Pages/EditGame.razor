@page "/games/edit/{Id}"
@using BlazorApp1.Models;
@using BlazorApp1.Services;
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize]
@inject IGamesService GamesService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager

<div class="row">
    <div class="col-md-4">
        <form>
            <div class="form-group">
                <label for="Title" class="control-label">Title</label>
                <input for="Title" class="form-control" @bind-value="@game.Title" />

                <label for="Description" class="control-label">Description</label>
                <input for="Description" class="form-control" @bind-value="@game.Description" />

                <label for="ReleaseYear" class="control-label">Release Year</label>
                <input for="ReleaseYear" class="form-control" @bind-value="@game.ReleaseYear" />

                <label for="GenresKeys" class="control-label">Genres</label>
                @foreach (Genre genre in Enum.GetValues(typeof(Genre)))
                {
                    <input type="checkbox" value="@genre" checked="@selectedGenres.Contains((Genre)Enum.Parse(typeof(Genre), genre.ToString()))" @onchange="() => ToggleGenre(genre)">

                    @genre
                }

                <input type="hidden" @bind-value="@game.Id" />
            </div>
            <div class="form-group">
                <button type="button" class="btn btn-primary" @onclick="() => UpdateGame()">Save</button>
                <button type="button" class="btn btn-danger" @onclick="() => cancel()">Cancel</button>
            </div>
        </form>
    </div>
</div>

@code {

    [Parameter]
    public string Id { get; set; }

    Game game = new Game();
    private List<Genre> selectedGenres = new List<Genre>();

    protected override async Task OnInitializedAsync()
    {
        game = await GamesService.GetById(Convert.ToInt32(Id));
        selectedGenres = game.Genres;
    }

    protected async Task UpdateGame()
    {
        game.Genres = selectedGenres;
        await GamesService.Update(game);
        navigationManager.NavigateTo("/games");
    }

    void cancel()
    {
        navigationManager.NavigateTo("/games");
    }

    private void ToggleGenre(Genre genre)
    {
        if (!selectedGenres.Contains(genre))
        {
            selectedGenres.Add(genre);
        }
        else
        {
            selectedGenres.Remove(genre);
        }
    }
}