@page "/users"
@attribute [Authorize(Roles = "Admin")]
@inject IUserService UserService

<div class="card mt-4">
    <h4 class="card-header">Users</h4>
    <div class="card-body">
        <h6>Users from secure api end point</h6>
        @if (loading)
        {
            <div class="spinner-border spinner-border-sm"></div>
        }
        @if (users != null)
        {
            @foreach(var user in users)
            {
                <ul>

                    <tr>
                        <td>@user.Id</td>
                        <td>@user.Name</td>
                        <td>@user.Surname</td>
                        <td>@user.Login</td>
                        <td>@user.Email</td>
                        <td>@user.RegisterDate</td>
                        <td>@user.IsBlocked</td>
                    <td>
                        <a class="btn btn-primary" @onclick="() => ChangeUsersBlockStatus(user.Id)">Block User</a>
                        <a class="btn btn-danger" @onclick="() => DeleteUser(user.Id)">Delete User</a>
                    </td>
                    </tr>
                </ul>
            }
        }
    </div>
</div>

@code {
    private bool loading;
    private IEnumerable<User> users;
    private User BlockUser = new User();

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        users = await UserService.GetAll();
        loading = false;
    }
    //[Authorize(Roles = "Admin")]
    private async Task ChangeUsersBlockStatus(int id)
    {
        BlockUser = await UserService.GetById(id);
        BlockUser.IsBlocked = !BlockUser.IsBlocked;
        await UserService.Update(BlockUser);
        users = await UserService.GetAll();
    }
    private async Task DeleteUser(int id)
    {
        await UserService.Delete(id);
        users = await UserService.GetAll();
    }
}