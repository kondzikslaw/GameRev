@page "/changePassword"
@using System.Text;
@attribute [Authorize]
@inject IUserService UserService
@inject ILocalStorageService LocalStorageService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager

<div class="row">
    <div class="col-md-4">
        <form>
            <div class="form-group">
                <label for="Password" class="control-label">Password</label>
                <input for="Password" class="form-control" @bind-value="@user.Password" />

                <label for="ConfirmPassword" class="control-label">Confirm Password</label>
                <input for="ConfirmPassword" class="form-control" @bind-value="@user.ConfirmPassword" />
            </div>
            <div class="form-group">
                <button type="button" class="btn btn-primary" @onclick="() => SavePassword()">Save</button>
                <button type="button" class="btn btn-danger" @onclick="() => cancel()">Cancel</button>
            </div>
        </form>
    </div>
</div>

@code {

    private User UserMe { get; set; }
    private User user = new User();

    protected override async Task OnInitializedAsync()
    {
        UserMe = await LocalStorageService.GetItem<User>("user");
    }

    protected async Task SavePassword()
    {
        var newPassword = user.Password;
        UserMe.Password = newPassword;
        user.AuthData = $"{UserMe.Login}:{newPassword}".EncodeBase64();
        await UserService.Update(UserMe);
        await LocalStorageService.RemoveItem("user");
        await LocalStorageService.SetItem("user", user);
        navigationManager.NavigateTo("/profile");
    }

    void cancel()
    {
        navigationManager.NavigateTo("/profile");
    }

    private string DecryptPasswordFromAuthData(string data)
    {
        var decryptedData = Convert.FromBase64String(data);
        var credentials = Encoding.UTF8.GetString(decryptedData).Split(new[] { ':' }, 2);

        return credentials[0];
    }
}